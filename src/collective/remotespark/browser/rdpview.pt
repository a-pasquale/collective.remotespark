<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="collective.remotespark">
<head>
    <metal:block fill-slot="style_slot" 
                 tal:define="navroot context/@@plone_portal_state/navigation_root_url">
        <link rel="stylesheet"
              tal:attributes="href string:${navroot}/++resource++collective.remotespark/hi5.css"
              />
        <link rel="stylesheet"
              tal:attributes="href string:${navroot}/++resource++collective.remotespark/rdp.css"
              />
        <link rel="stylesheet"
              tal:attributes="href string:${navroot}/++resource++collective.remotespark/custom.css"/>
    </metal:block>
    <metal:block fill-slot="javascript_head_slot" 
                 tal:define="navroot context/@@plone_portal_state/navigation_root_url">
        <script tal:attributes="src string:${navroot}/++resource++collective.remotespark/hi5_min.js"></script>
    </metal:block>
</head>
<body>

    <div metal:fill-slot="main">
        <tal:main-macro metal:define-macro="main">

  <!--[if IE]>
    <script type="text/javascript" 
     src="http://ajax.googleapis.com/ajax/libs/chrome-frame/1/CFInstall.min.js"></script>

    <style>
     .chromeFrameInstallDefaultStyle {
       width: 70%; 
       border: 5px solid blue;
     }
    </style>

    <script>
     // The conditional ensures that this code will only execute in IE,
     // Therefore we can use the IE-specific attachEvent without worry
     window.attachEvent("onload", function() {
       CFInstall.check({
       mode: "overlay"
       });
     });
    </script>
  <![endif]-->

	<div id="sparkview">
		<canvas id="remotectrl" width="1" height="1"></canvas>
	</div>

    <!-- following is for login dialog only -->
	<div id="login">
		<form id="frmConn" onsubmit="hideHeader(); return connectRDP();" role="form">
		<h2>Cloud Login</h2>
        <div id="login_ping">
            <div class="circle"></div>
            <div class="circle1"></div>
            <div class="msg"><p>Checking for a secure connection...</p><p>If you are logging in from outside the office, please connect to the VPN.</p></div>
        </div>
        <div id="login_connect">
            <div id="locked">
                <img src="/++resource++collective.remotespark/lock.png" 
                     width="64"/>
            </div>
            <div class="form-group">
                <label for="user">Username</label>
                <input type="text" class="form-control" name="user" id="user" autofocus/>
            </div>
            <div class="form-group">
                <label for="pwd">Password</label>
                <input class="form-control" type="password" name="pwd" />
            </div>
            <input type="hidden" name="id" />
            <input type="hidden" name="server" id="server" value="AZURE"/>
            <input type="hidden" name="gateway" id="gateway" value="10.1.100.133"/>
            <input type="hidden" name="port" value="3389" />
            <input type="hidden" name="domain" />
            <select name="server_bpp" style="display:none">
                <option value="32" selected>32 bit</option>
            </select>
            <input type="hidden" name="server_bpp" value="32" />
            <input type="hidden" name="width" id="width" value="800" />
            <input type="hidden" name="height" id="height" value="600" />
            <select name="timezone" id="timezone" style="display: none">
                <option>(GMT-08:00) Pacific Standard Time</option>
                <option>(GMT-07:00) Mountain Standard Time</option>
                <option>(GMT-06:00) Central Standard Time</option>
                <option>(GMT-05:00) Eastern Standard Time</option>
            </select>
            <input type="submit" name="connect" value="Connect" class="btn btn-primary noCheck"/>
        </div>
	<div id="pc_key"><span>Ctrl</span><span>Alt</span><span>Del</span><span>Esc</span><span>...</span>
	  <div id="pc_key_more">
		<span>F1</span><span>&larr;</span><span>&uarr;</span><span>&rarr;</span><span>&darr;</span><span>Start</span><span>Alt+F4</span><span>Ctrl+Alt+Del</span>
	 </div>
	</div>
	
<script type="text/javascript">
hi5.init.start();

window.$id = function (id){
	return document.getElementById(id);
};

function checkBrowser(){
	var hasCanvas = false;
	var msg = "";
	try { 
		document.createElement("canvas").getContext("2d");
		hasCanvas = true;
	} catch (e) {
		msg = "This browser does not support Canvas.\n\n";
	};
	
	
	var noWebSocket = !("WebSocket" in window) && !("MozWebSocket" in window);
	var userAgent = navigator.userAgent;
	var isFirefox = userAgent.indexOf("Firefox") != -1;
		
	if (noWebSocket){
		msg += "This browser doesn't support WebSocket.\n\n";
		if (isFirefox){
			msg += "Please update to Firefox 6 or later.\n\n";
		}
		else if (userAgent.indexOf("Opera") != -1){
			msg += "Please open 'opera:config#Enable WebSockets' (type it in the link field) make 'Enable WebSockets' selected and restart Opera.\n\n";
		}
		else if (userAgent.indexOf("MSIE") != -1){
			msg += "Please install Google Chrome Frame.\n\n";
		}
	}
	
	if (msg.length > 0)
		alert(msg);
	
	var ready = !noWebSocket && hasCanvas;
	
	return ready;
};

function initTimezone(){
	var off = new Date().getStdTimezoneOffset()
	var h = (off / 60) >> 0;
	var zone, m = off - h * 60;
	
	if (h == 0){
		zone = "(GMT)";
	}else{
		zone = (h < 0) ? "(GMT+" : "(GMT-";
		h = Math.abs(h);
		if (h < 10){
			zone += "0";
		}
		zone += (h + ":" + m);
	}
	var tzSelect = $id("timezone");
	var ops = tzSelect.options;
	h = ops.length;
	for (var i = 0; i < h; i++){
		if (ops[i].text.indexOf(zone) == 0){
			tzSelect.selectedIndex = i;
			break;
		}
	}
}

function initUI(){
	checkBrowser();
	if (hi5.browser.isTouch){
		$id("touchrow").style.display = "table-row";
	}
	svGlobal.util.initDragDrop($id("dropZone"), $id("frmConn"));
	useFullBrowser();
	initTimezone();
    /*
    initServers();
	var info = $id("joinSelect");
	if (info){
		info.onchange = function(e){
			svManager.getInstance().setJoinMode(e.target.value);
		};
	}
	
	var control =$id("requestControl");
	if (control){
		control.onclick = function(e){
			svManager.getInstance().requestControl();
		};
	}
	
	var remotefx = $id("rfxOpt");
	if (remotefx){
		remotefx.onchange = function(e){
			if (e.target.checked){
				$id("colorOpt").selectedIndex = 3;//32 bit color
			}
		};
	}
    */
}
	
window.addEventListener('load', initUI, false);
/*
function initServers(){
	var gw = $id("gateway"); 
	var h = gw.value;
	if (!h){
		h = hi5.tool.queryToObj().gateway;//gateway value in the url
		if (!h){
			h = '10.1.100.133';
			if (!h) h = "localhost";
		}
		gw.value = h;
	}

	var server = $id("server");
	
	var save = $id("save");
	var clear = $id("clear");
	var remove = $id("delete");
	
	if (!Connection.hasStorage){
		save.style.visibility="hidden";
		clear.style.visibility="hidden";
		remove.style.visibility="hidden";
		return;
	}
	
	loadServers().onchange = function(){
		var key = server.value;
		Connection.loadToForm($id("frmConn"), key);
	};
	
	save.onclick = function(){
		if (server.value.length < 1){
			alert("Please enter computer name.");
			return null;
		}

		var key =Connection.saveForm($id("frmConn"));
		loadServers();
	};

	clear.onclick = function(){
		if (confirm("All saved data will be removed?")){
			Connection.clear();
			loadServers();
			server.value = "";
		}
	};
	
	remove.onclick = function(){
		var key = $id("server").value;
		if (key.length < 1){
			alert("Please select a computer first.");
			return;
		}
		Connection.remove(key);
		loadServers();
		server.value = "";
	}
	
    //syncronize computers with gateway, 
    //remove following two lines and serverListCallback if you dont want to do so.
	//var addr = (("https:" == location.protocol) ?  "wss://" : "ws://") + gw.value + "/LIST";
	//getServers(addr, serverListCallback);

}

function loadServers(){
	var svrs = Connection.getAll();
	var srvs = $id("server");
	var ops = $id("server").options;
	ops.length = 0;
	for (var i = 0, l = svrs.length; i < l; i++){
		ops[i] = new Option(svrs[i]);		
	}
	return srvs;	
}
*/

function useFullScreen(){
	$id("width").value = screen.width;
	$id("height").value = screen.height;
};

function useFullBrowser(){
	$id("width").value = window.innerWidth;
    // Make the canvas 20px shorter so the personalbar fits.
	$id("height").value = window.innerHeight - 20;
};

function registerRdp(){
	if ("registerProtocolHandler" in navigator){
		navigator.registerProtocolHandler("web+rdp", location.protocol +"//" + location.host + "/rdpdirect.html?%s", "Spark View");
	}
	else{
		alert("Sorry, your browser doesn't support this.");
	}
}
var r; // Make r global.

function connectRDP(){
	//$id("server").hide();
	var frms = $id("frmConn").elements;
	var l = frms.length;
	var s = "";
	var gw = '10.1.100.133';
	var w = window.innerWidth, h = window.innerHeight, server_bpp = 16;
    useFullBrowser();
	for (var i = 0; i < l; i++){
		var field = frms[i];
		if ((field.type=="radio" || field.type=="checkbox") && !field.checked) continue;
		var v = field.value;
		if (v == "")continue;
		var n = field.name;
		if (n == "gateway"){
			gw = v;
			continue;
		}
		else if (n == "width"){
			w = v;
			continue;
		}
		else if (n == "height"){
			h = v;
			continue;
		}
		else if (n == "server_bpp"){
			server_bpp = v;
			continue;
		}
		
		if (s != "") s += "&";
		s += (n + "=" + encodeURIComponent(v));
	}
	
	var protocol = ("https:" == location.protocol) ? "wss://" : "ws://";
	var frmConn = $id("frmConn");
	r = svManager.getInstance(); 
	if (r == null){
		r = new svGlobal.Rdp(protocol + gw + "/RDP?" + s, w, h, server_bpp);
	}else{
		var apps = r.getRunninApps();
		var len = apps.length;
		var isApp = $id("app").checked;
		var warn = r.isRemoteApp() && (!isApp); 
		if (warn){
			var s = "Warning: A RemoteApp session is still active.\n\n";
			for (var i = 0; i < len; i++){
				s += apps[i] + "\n";
			}
			s += "\nPlease open a new Window for new sessions.\n";
			alert(s);
			return;
		}
	}
	var newWin = r.isRemoteApp() && svGlobal.isMultitask;//open in new window
	if (newWin){
		function onSurfaceReady(surface){
			r.addSurface(surface);
			console.log("remoteApp: " + frmConn["exe"].value + " arg=" + frmConn["args"].value);
			if (r.running())
				r.startApp(frmConn["exe"].value, frmConn["args"].value, "");
		};
		window.svOnSurfaceReady = onSurfaceReady;
		var rail = window.open("rail.html");
		rail.svOnSurfaceReady = onSurfaceReady;
	}else{
		$("#login").fadeOut("slow");
		r.onclose = function(){
			r.hide();
            console.log("r closed");
			$id("login").style.display = "block";
		};
		r.addSurface(new svGlobal.LocalInterface());
	}
	
	r.onerror = function(e){
		console.log(e.name + ":" + e.message);
	};

	r.run();
	
    //$("input[name='pwd']").val("");	
	
	return false;
};

</script>

<tal:block  tal:define="navroot context/@@plone_portal_state/navigation_root_url">
    <script tal:attributes="src string:${navroot}/++resource++collective.remotespark/resource.js"></script>
    <script tal:attributes="src string:${navroot}/++resource++collective.remotespark/surface_min.js"></script>
    <script tal:attributes="src string:${navroot}/++resource++collective.remotespark/rdp.js"></script>
</tal:block>
	
<script type="text/javascript">
/*
$("#portal-personaltools").hover(function(event) {
    event.stopImmediatePropagation();
    console.log("mouseover");
    $("#header").stop();
    // unbind the hoverIntent
    $("#header").unbind("mouseenter").unbind("mouseleave");
    $("#header").removeProp('hoverIntent_t');
    $("#header").removeProp('hoverIntent_s');
    }, $("#header").hoverIntent("expandHeader, shrinkHeader") 
    );
 */

$("#portal-personaltools, #toggle-controlbox").mouseenter(function(event) {
    $(this).addClass("active");
});

function expandHeader() {
    if ($('#portal-personaltools, #toggle-controlbox').hasClass('active')) {return;}
    $(this)
        .css({top:-60})
        .animate({top:0})
    $("#wsinput").hide();
};

function shrinkHeader() {
    if ($("#header").css("top") == "-50px") { return; } 
    $(this)
        .css({top:0})
        .animate({top:-50});
    $('#wsinput').show();
};

<!-- Hide the navbar unless mouse enters the personal bar. -->
function hideHeader() {
    $('.navbar-fixed-top').css({position:'absolute'});
    $('#header').css({top:-50,position:'fixed',width:'100%'});
    $('#header').hoverIntent(expandHeader, shrinkHeader);
};

$("#portal-personaltools, #toggle-controlbox").on("mouseout", function() {
    $(this).removeClass("active");
});

var last_connected = false;

// Functions to check VPN connectivity
function loadImage(url) {
    var timer;
    function clearTimer() {
        if (timer) {                
            clearTimeout(timer);
            timer = null;
        }
    }

    function handleFail() {
        // kill previous error handlers
        this.onload = this.onabort = this.onerror = function() {};
        // stop existing timer
        clearTimer();
        // switch to alternate url
        return disconnected();
    }

    var img = new Image();
    img.onerror = img.onabort = handleFail;
    img.onload = function() {
        connected();
        clearTimer();
    }
    img.src = url;
    // Check every 10 seconds
    timer = setTimeout(function(theImg) { 
        return function() {
            handleFail.call(theImg);
        };
    }(img), 10000);
    return;
}

function connected() {
    last_connected = true;
    $("#login_ping").hide();
    // If the rdp input area exists, display it.
    if ($("#wsinput").length>0) {
        $("#sparkview").fadeIn("slow");
        // Hide the live chat box.
        olark('api.box.hide');
    } else {
        //  Otherwise, display the login box.
        $("#login_connect").fadeIn("slow");
        olark('api.box.show');
    }
}

function disconnected() {
    if (last_connected) {
        $("#sparkview").hide();
        $("#login_connect").hide();
        $("#login").show();
        $("#login_ping").fadeIn("slow")
            $("#login_ping .msg").text("Secure connection lost.  Reloading the page...").delay(2000)
            document.location.reload(true);
    }
    last_connected = false;
}

// Check connectivity to the VPN every 11 seconds.
(function pingServer() {
    var src = "https://10.1.100.133/1x1.gif/?cachebreaker="+new Date().getTime();
    loadImage(src);
    setTimeout(pingServer, 11000);
})();
$(document).ready( function() {
    $("#colophon").hide();
});
</script>


        </tal:main-macro>
    </div>
</body>
</html>
